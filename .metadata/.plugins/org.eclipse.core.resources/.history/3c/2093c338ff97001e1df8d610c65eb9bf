package mvc;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Properties;

import jakarta.servlet.RequestDispatcher;
import jakarta.servlet.ServletConfig;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

public class Controller extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private Map<String, Object> commandMap = new HashMap<String, Object>();

	@SuppressWarnings("unchecked")
	public void init(ServletConfig config) throws ServletException {
		// read init-param value from propertyConfig in web.xml
		String props = config.getInitParameter("propertyConfig");
		// create command and Properties object to save as mapping info 
		Properties properties = new Properties();
		String path = config.getServletContext().getRealPath("/WEB-INF");
		FileInputStream fileInputStream = null;
		try {
			// read contents in Command.properties file
			fileInputStream = new FileInputStream(new File(path, props));
			// save Command.properties information into Properties object
			properties.load(fileInputStream);
		} catch (IOException e) {
			throw new ServletException(e);
		} finally {
			if (fileInputStream != null)
				try {
					fileInputStream.close();
				} catch (IOException ex) {
				}
		}
		Iterator<Object> keyIterator = properties.keySet().iterator();
		// access object in Properties
		while (keyIterator.hasNext()) {
			String command = (String) keyIterator.next();
			String className = properties.getProperty(command);
			try { 
				// make string as class
				Class commandClass = Class.forName(className);
				@SuppressWarnings("deprecation")
				Object commandInstance = commandClass.newInstance();// construct class object
				// save Map object as commandMap
				commandMap.put(command, commandInstance);
			} catch (ClassNotFoundException e) {
				throw new ServletException(e);
			} catch (InstantiationException e) {
				throw new ServletException(e);
			} catch (IllegalAccessException e) {
				throw new ServletException(e);
			}
		}
	}

	public Controller() {
		super();
	}

	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		processRequest(request, response);
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		processRequest(request, response);
	}

//	private void processRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
//		String view = null;
//		// does what ActionFactory class did; /mvc/message.di=mvc.MessageProcess
//		// /jsptest/mvcMem/member.di
//		String command = request.getRequestURI();
//		// /jsptest
//		String path = request.getContextPath();
//		if(command.indexOf(request.getContextPath()) == 0) {
//			command = command.substring(0, path.length());
//		}
//		// public class MessageProcess implements CommandProcess
//		// ActionFactory factory = ActionFactory.getInstance();
//		// Action action = factory.getAction(cmd);
//		CommandProcess commandProcess = (CommandProcess)commandMap.get(command);
//		// ActionForward af = action.execute(request, response);
//				try {
//					view = commandProcess.requestPro(request, response);
//				} catch (Throwable e) {
//					// TODO Auto-generated catch block
//					e.printStackTrace();
//				}
//			RequestDispatcher dispatcher = request.getRequestDispatcher(view);
//			dispatcher.forward(request, response);
//	}
//}

	
//
//	@SuppressWarnings("unchecked")
//	public void init(ServletConfig config) throws ServletException {
//		String props = config.getInitParameter("propertyConfig");
//		Properties pr = new Properties();
//		String path = config.getServletContext().getRealPath("/WEB-INF");
//		FileInputStream f = null;
//		try {
//			f = new FileInputStream(new File(path, props));
//			pr.load(f);
//		} catch (IOException e) {
//			throw new ServletException(e);
//		} finally {
//			if (f != null)
//				try {
//					f.close();
//				} catch (IOException ex) {
//				}
//		}
//		Iterator<Object> keyIter = pr.keySet().iterator();
//		while (keyIter.hasNext()) {
//			String command = (String) keyIter.next();
//			String className = pr.getProperty(command);
//				Class commandClass = Class.forName(className);
//				Object commandInstance = commandClass.newInstance();
//				commandMap.put(command, commandInstance);
//			} catch (ClassNotFoundException e) {
//				throw new ServletException(e);
//			} catch (InstantiationException e) {
//				throw new ServletException(e);
//			} catch (IllegalAccessException e) {
//				throw new ServletException(e);
//			}
//		}
//	}

	private void processRequest(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		String view = null;
		CommandProcess com = null;
		try {
			String command = request.getRequestURI();
			if (command.indexOf(request.getContextPath()) == 0) {
				command = command.substring(request.getContextPath().length());
			}
			com = (CommandProcess) commandMap.get(command);
			view = com.requestPro(request, response);
		} catch (Throwable e) {
			throw new ServletException(e);
		}
		RequestDispatcher dispatcher = request.getRequestDispatcher(view);
		dispatcher.forward(request, response);
	}
}