package mvc;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Properties;

import jakarta.servlet.RequestDispatcher;
import jakarta.servlet.ServletConfig;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

public class Controller extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private Map<String, Object> commandMap = new HashMap<String, Object>();

	@SuppressWarnings("unchecked")
	public void init(ServletConfig config) throws ServletException {
		// read init-param value from propertyConfig in web.xml
		String props = config.getInitParameter("propertyConfig");
		// create command and Properties object to save as mapping info 
		Properties properties = new Properties();
		String path = config.getServletContext().getRealPath("/WEB-INF");
		FileInputStream fileInputStream = null;
		try {
			// read contents in Command.properties file
			fileInputStream = new FileInputStream(new File(path, props));
			// save Command.properties information into Properties object
			properties.load(fileInputStream);
		} catch (IOException e) {
			throw new ServletException(e);
		} finally {
			if (fileInputStream != null)
				try {
					fileInputStream.close();
				} catch (IOException ex) {
				}
		}
		Iterator<Object> keyIterator = properties.keySet().iterator();
		// access object in Properties
		while (keyIterator.hasNext()) {
			String command = (String) keyIterator.next();
			String className = properties.getProperty(command);
			try { 
				// make string as class
				Class commandClass = Class.forName(className);
				@SuppressWarnings("deprecation")
				Object commandInstance = commandClass.newInstance();// construct class object
				// save Map object as commandMap
				commandMap.put(command, commandInstance);
			} catch (ClassNotFoundException e) {
				throw new ServletException(e);
			} catch (InstantiationException e) {
				throw new ServletException(e);
			} catch (IllegalAccessException e) {
				throw new ServletException(e);
			}
		}
	}

	public Controller() {
		super();
	}

	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		processRequest(request, response);
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		processRequest(request, response);
	}

	private void processRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		String view = null;
		// does what ActionFactory class did; /mvc/message.di=mvc.MessageProcess
		// /jsptest/mvcMem/member.di
		String command = request.getRequestURI();
		// /jsptest
		String path = request.getContextPath();
		if(command.indexOf(request.getContextPath()) == 0) {
			command = command.substring(0, path.length());
		}
		// public class MessageProcess implements CommandProcess
		// ActionFactory factory = ActionFactory.getInstance();
		// Action action = factory.getAction(cmd);
		CommandProcess commandProcess = (CommandProcess)commandMap.get(command);
		// ActionForward af = action.execute(request, response);
				view = commandProcess.requestPro(request, response);
			RequestDispatcher dispatcher = request.getRequestDispatcher(view);
			dispatcher.forward(request, response);
	}
}

//package mvc;
//
//import java.io.File;
//import java.io.FileInputStream;
//import java.io.IOException;
//import java.util.HashMap;
//import java.util.Iterator;
//import java.util.Map;
//import java.util.Properties;
//
//import jakarta.servlet.RequestDispatcher;
//import jakarta.servlet.ServletConfig;
//import jakarta.servlet.ServletException;
//import jakarta.servlet.http.HttpServlet;
//import jakarta.servlet.http.HttpServletRequest;
//import jakarta.servlet.http.HttpServletResponse;
//
//public class Controller extends HttpServlet {
//	private static final long serialVersionUID = 1L;
//	// 명령어와 명령어 처리 클래스를 쌍으로 저장
//	private Map<String, Object> commandMap = new HashMap<String, Object>();
//
//	// 명령어와 처리클래스가 매핑되어 있는 properties 파일을
//	// 읽어서 Map객체인 commandMap에 저장
//	// 명령어와 처리클래스가 매핑되어 있는 properties 파일은
//	// Command.properties파일
//	@SuppressWarnings("unchecked")
//	public void init(ServletConfig config) throws ServletException {
//		// web.xml에서 propertyConfig에 해당하는 init-param의 값을 읽어옴
//		String props = config.getInitParameter("propertyConfig");
//		// 명령어와 처리클래스의 매핑정보를 저장할 Properties객체 생성
//		Properties pr = new Properties();
//		String path = config.getServletContext().getRealPath("/WEB-INF");
//		FileInputStream f = null;
//		try {
//			// Command.properties파일의 내용을 읽어옴
//			f = new FileInputStream(new File(path, props));
//			// Command.properties파일의 정보를 Properties객체에 저장
//			pr.load(f);
//		} catch (IOException e) {
//			throw new ServletException(e);
//		} finally {
//			if (f != null)
//				try {
//					f.close();
//				} catch (IOException ex) {
//				}
//		}
//		// Iterator객체는 Enumeration객체를 확장시킨 개념의 객체
//		Iterator<Object> keyIter = pr.keySet().iterator();
////객체를 하나씩 꺼내서 그 객체명으로 Properties객체에 저장된 객체에 접근
//		while (keyIter.hasNext()) {
//			String command = (String) keyIter.next();
//			String className = pr.getProperty(command);
//			try {// 해당 문자열을 클래스로 만든다.
//				Class commandClass = Class.forName(className);
//				Object commandInstance = commandClass.newInstance();// 해당클래스의 객체를 생성
//				// Map객체인 commandMap에 객체 저장
//				commandMap.put(command, commandInstance);
//			} catch (ClassNotFoundException e) {
//				throw new ServletException(e);
//			} catch (InstantiationException e) {
//				throw new ServletException(e);
//			} catch (IllegalAccessException e) {
//				throw new ServletException(e);
//			}
//		}
//	}
//
//	public void doGet(// get방식의 서비스 메소드
//			HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
//		requestPro(request, response);
//	}
//
//	protected void doPost(// post방식의 서비스 메소드
//			HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
//		requestPro(request, response);
//	}

	// 시용자의 요청을 분석해서 해당 작업을 처리
//	private void processRequest(HttpServletRequest request, HttpServletResponse response)
//			throws ServletException, IOException {
//		String view = null;
//		CommandProcess com = null;
//		try {
//			String command = request.getRequestURI();
//			if (command.indexOf(request.getContextPath()) == 0) {
//				command = command.substring(request.getContextPath().length());
//			}
//			com = (CommandProcess) commandMap.get(command);
//			view = com.requestPro(request, response);
//		} catch (Throwable e) {
//			throw new ServletException(e);
//		}
//		RequestDispatcher dispatcher = request.getRequestDispatcher(view);
//		dispatcher.forward(request, response);
//	}
