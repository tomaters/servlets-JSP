package mvc;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Properties;

import jakarta.servlet.ServletConfig;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

public class Controller extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private Map<String, Object> commandMap = new HashMap<String, Object>();

	@SuppressWarnings("unchecked")
	public void init(ServletConfig config) throws ServletException {
		// read init-param value from propertyConfig in web.xml
		String props = config.getInitParameter("propertyConfig");
		// create command and Properties object to save as mapping info 
		Properties properties = new Properties();
		String path = config.getServletContext().getRealPath("/WEB-INF");
		FileInputStream fileInputStream = null;
		try {
			// read contents in Command.properties file
			fileInputStream = new FileInputStream(new File(path, props));
			// save Command.properties information into Properties object
			properties.load(fileInputStream);
		} catch (IOException e) {
			throw new ServletException(e);
		} finally {
			if (fileInputStream != null)
				try {
					fileInputStream.close();
				} catch (IOException ex) {
				}
		}
		Iterator<Object> keyIterator = properties.keySet().iterator();
		// 객체를 하나씩 꺼내서 그 객체명으로 Properties객체에 저장된 객체에 접근
		while (keyIterator.hasNext()) {
			String command = (String) keyIterator.next();
			String className = properties.getProperty(command);
			try {// 해당 문자열을 클래스로 만든다.
				Class commandClass = Class.forName(className);
				Object commandInstance = commandClass.newInstance();// 해당클래스의 객체를 생성
				// Map객체인 commandMap에 객체 저장
				commandMap.put(command, commandInstance);
			} catch (ClassNotFoundException e) {
				throw new ServletException(e);
			} catch (InstantiationException e) {
				throw new ServletException(e);
			} catch (IllegalAccessException e) {
				throw new ServletException(e);
			}
		}
	}

	public Controller() {
		super();
	}

	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		doGet(request, response);
	}

}
